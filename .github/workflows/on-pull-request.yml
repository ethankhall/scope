on: [pull_request]

name: Continuous integration

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: rustup update
      - uses: Swatinem/rust-cache@v2
      - name: cargo build
        run: cargo build
      - name: cargo check
        run: cargo check
      ## Cargo test
      - name: cargo test
        run: cargo test
      ## Cargo fmt
      - run: rustup component add rustfmt
      - name: cargo fmt
        run:  cargo fmt --all -- --check
      ## Cargo clippy
      - name: cargo clippy
        run: cargo clippy -- -D warnings

  create-release:
    needs:
      - check
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: create pre-release
        id: version
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          set -eux
          set -o pipefail
          VERSION="$(env TZ=UTC date +"0.%Y%m%d.0-$(git rev-parse --short HEAD)")"
          echo "Creating release $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          gh release create $VERSION --generate-notes --prerelease --target ${{ github.event.pull_request.head.sha }} --draft

  publish:
    uses: ./.github/workflows/create-artifacts.yml
    needs: create-release
    with:
      version: ${{ needs.create-release.outputs.version }}

  promote-draft:
    runs-on: ubuntu-latest
    needs:
      - create-release
      - publish
    steps:
      - uses: actions/checkout@v3
      - name: undraft release
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release edit ${{ needs.create-release.outputs.version }} --draft=false

  clean-draft:
    runs-on: ubuntu-latest
    needs:
      - create-release
      - publish
    if: ${{ failure() && needs.create-release.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v3
      - name: delete draft release release
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release delete ${{ needs.create-release.outputs.version }} --yes
